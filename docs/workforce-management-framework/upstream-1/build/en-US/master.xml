<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc maxdepth="4"?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>RainCatcher</title><subtitle>For Use with FeedHenry 1</subtitle>

<date>2017-08-01</date>
<productname>FeedHenry</productname>
<productnumber>3.x</productnumber>
<abstract>
    <para>This documentation does ABC for FeedHenry 1.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Author_Group.xml"/>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<chapter xml:id="introducing-raincatcher">
<title>Introducing RainCatcher</title>
<section xml:id="understanding-raincatcher">
<title>Understanding RainCatcher</title>

</section>
<section xml:id="con-raincatcher-overview-understanding-raincatcher">
<title>RainCatcher Overview</title>
<simpara>RainCatcher is a software framework and is made up with varying node.js modules which are written in TypeScript.
These moudles are packaged and distributed as part of the RainCatcher solution.
The primary use of the RainCatcher solution is to provide a Workforce Management Oriented framework for Workforce Management applications.</simpara>
<simpara>The RainCatcher solution comprises of two fully independent frameworks:</simpara>
<itemizedlist>
<listitem>
<simpara>Workflow Management Framework</simpara>
</listitem>
<listitem>
<simpara>Rapid Application Development Framework</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="con-rapid-application-development-framework-understanding-raincatcher">
<title>Rapid Application Development Framework</title>
<simpara>The RainCatcher Rapid Application Development Framework allows to build production-grade
Node.js and Cordova based applications.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/topics/shared/images/technologies.png"/>
</imageobject>
<textobject><phrase>Technologies</phrase></textobject>
</inlinemediaobject></simpara>
</section>
<section xml:id="con-raincatcher-demo-understanding-raincatcher">
<title>RainCatcher Demo Application</title>
<simpara>RainCatcher contains a demo application which contains many of the RainCatcher features.
The demo contains:</simpara>
<itemizedlist>
<listitem>
<simpara>Implementations for a Workflow Management Solutions</simpara>
</listitem>
<listitem>
<simpara>Website, Mobile and server demo applications serving as reference implementations for the RainCatcher framework</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="con-module-structures-and-relationships-understanding-raincatcher">
<title>Module Structures and Relationships</title>
<simpara>Raincatcher-AngularJS Application</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">raincatcher-demo-mobile</entry>
<entry align="left" valign="top">raincatcher-demo-portal</entry>
<entry align="left" valign="top">raincatcher-demo-cloud</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Mobile application for WFM process users</simpara></entry>
<entry align="left" valign="top"><simpara>Web application for WFM process administrators</simpara></entry>
<entry align="left" valign="top"><simpara>Backend services for applications</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>User Space Modules</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<thead>
<row>
<entry align="left" valign="top">vehicle-inspection-task</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>interface VehicleAssessment extends Task</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Raincatcher Core Modules and Interfaces</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">raincatcher-wfm</entry>
<entry align="left" valign="top">raincatcher-security</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Workflow Management Framework, interface Task, interface Flow, interface Process</simpara></entry>
<entry align="left" valign="top"><simpara>Security abstraction layer, class PassportAuth, Keycloak Middleware</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="module_structure" remap="_module_structure">
<title>Module structure</title>
<simpara>RainCatcher modules are written in <link xlink:href="http://typescriptlang.org">TypeScript</link>.</simpara>
<simpara>The main files are modules that by default export a class containing the main implementation for the moduleâ€™s intent,with a named export containing a public interface that should be depended upon, and reimplemented.</simpara>
<programlisting language="typescript" linenumbering="unnumbered">import Implementation, { PublicInterface } from '@raincatcher/module';</programlisting>
</section>
<section xml:id="default_exports" remap="_default_exports">
<title>Default exports</title>
<simpara>Each module exports by default an implementation and set of interfaces by name.
Default implementation will usually implement most common use case for module.
Along with the default export, all modules include a public interface definition that are depended upon by other RainCatcher modules instead of depending on the implementation itself.</simpara>
</section>
</section>
<section xml:id="introducing-raincatcher-features">
<title>Introducing RainCatcher Features</title>
<section xml:id="con-logging-introducing-raincatcher-features">
<title>Logging Module</title>
<simpara>The RainCatcher Logger Module is a logging facade for node.js based applications and it is used by all RainCatcher modules.
The RainCatcher Logger Module is is contained in the <literal>raincatcher-core</literal> module.</simpara>
<simpara>There are two implementations of the RainCatcher Logger module, Bunyan and Console.
By default, the Bunyan and the Console implementations are not setup and so, no logging exists by default.
Users can use their own loggers by wrapping their logger into the provided class.</simpara>
<simpara>For more information, see the <link xlink:href="https://github.com/feedhenry-raincatcher/raincatcher-core/tree/master/cloud/logger/example">Logger Example</link>.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="preparing-the-local-development-environment">
<title>Preparing the Local Development Environment</title>

</chapter>
<chapter xml:id="getting-started-with-raincatcher">
<title>Getting Started with RainCatcher</title>

</chapter>
<chapter xml:id="programming-a-raincatcher-project">
<title>Programming a RainCatcher Project</title>
<section xml:id="using-wfm-logger-and-setting-a-logging-level">
<title>Using RainCatcher Logger and Setting a Logging Level</title>
<section xml:id="con-logging-using-wfm-logger-and-setting-a-logging-level">
<title>Logging Module</title>
<simpara>The RainCatcher Logger Module is a logging facade for node.js based applications and it is used by all RainCatcher modules.
The RainCatcher Logger Module is is contained in the <literal>raincatcher-core</literal> module.</simpara>
<simpara>There are two implementations of the RainCatcher Logger module, Bunyan and Console.
By default, the Bunyan and the Console implementations are not setup and so, no logging exists by default.
Users can use their own loggers by wrapping their logger into the provided class.</simpara>
<simpara>For more information, see the <link xlink:href="https://github.com/feedhenry-raincatcher/raincatcher-core/tree/master/cloud/logger/example">Logger Example</link>.</simpara>
</section>
<section xml:id="procedure" remap="_procedure">
<title>Procedure</title>
<section xml:id="pro-importing-the-bunyan-logging-module-using-wfm-logger-and-setting-a-logging-level">
<title>Importing the Bunyan Logging Module</title>
<simpara>To incorporate the Bunyan logging into a project, the RainCatcher Logging Module is imported and then the Bunyan Logging Module is initialized.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><literal>raincatcher-core module</literal> must be installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following code to the file where you want to import the Bunyan Logging:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">// Import logger implementation
import {BunyanLogger, logger, setLogger} from '@raincatcher/logger';

// Instaniate logger
setLogger(new BunyanLogger({name: 'index', level:'info' }));</programlisting>
</listitem>
<listitem>
<simpara>To log a comment, add the following code <emphasis>after</emphasis> the code directly above:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">logger.info('This log will render with BunyanLogger');</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Related Information</title>
<listitem>
<simpara>For more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="pro-setting-the-bunyan-logging-level-using-wfm-logger-and-setting-a-logging-level">
<title>Setting the Bunyan Logging Level</title>
<simpara>Determine the logging level you want (for more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link>) and set the Bunyan logging level accordingly.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Bunyan Logging Module is imported. For more information, see <link linkend="pro-importing-the-bunyan-logging-module-using-wfm-logger-and-setting-a-logging-level">Importing the Bunyan Logging Module</link></simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Directly underneath the code for importing the Bunyan Logging Module, set the &lt;LogLevel&gt;:</simpara>
<programlisting language="json" linenumbering="unnumbered">setLogger(new ConsoleLogger(&lt;LogLevel&gt;));

#Example:
setLogger(new ConsoleLogger(LogLevel.INFO));</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Related Information</title>
<listitem>
<simpara>For more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="pro-importing-the-console-logging-module-using-wfm-logger-and-setting-a-logging-level">
<title>Importing the Console Logging Module</title>
<simpara>To incorporate the Console logging into a project, the RainCatcher Logging Module is imported and then the Console Logging Module is initialized.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><literal>raincatcher-core module</literal> must be installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following code to the file where you want to import the Console Logging:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">// Import logger implementation
import {ConsoleLogger, logger, setLogger} from '@raincatcher/logger';

// Instaniate logger
const log = new ConsoleLogger();;
setLogger(log);</programlisting>
</listitem>
<listitem>
<simpara>To log a comment, add the following code <emphasis>after</emphasis> the code directly above:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">logger.info('This log will render with ConsoleLogger');</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Related Information</title>
<listitem>
<simpara>For more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="pro-setting-the-console-logging-level-using-wfm-logger-and-setting-a-logging-level">
<title>Setting the Console Logging Level</title>
<simpara>Determine the logging level you want (for more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link>) and set the Console logging level accordingly.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Console Logging Module is imported. For more information, see <link linkend="pro-importing-the-console-logging-module-using-wfm-logger-and-setting-a-logging-level">Importing the Console Logging Module</link></simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Directly underneath the code for importing the Console Logging Module, set the &lt;LogLevel&gt;:</simpara>
<programlisting language="json" linenumbering="unnumbered">setLogger(new BunyanLogger(&lt;LogLevel&gt;));

#Example:
setLogger(new BunyanLogger(LogLevel.INFO));</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Related Information</title>
<listitem>
<simpara>For more information, see <link linkend="ref-logging-using-wfm-logger-and-setting-a-logging-level">Logging Reference Information</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="related_information" remap="_related_information">
<title>Related Information</title>
<section xml:id="ref-logging-using-wfm-logger-and-setting-a-logging-level">
<title>Logging Reference Information</title>
<simpara>This section describes:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="client-and-server-logging-using-wfm-logger-and-setting-a-logging-level">Client and Server Logging</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="bunyan-and-console-logging-levels-using-wfm-logger-and-setting-a-logging-level">Bunyan and Console Logging Levels</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="understanding-the-logging-levels-using-wfm-logger-and-setting-a-logging-level">Understanding the Logging Levels</link></simpara>
</listitem>
</itemizedlist>
<section xml:id="client-and-server-logging-using-wfm-logger-and-setting-a-logging-level">
<title>Client and Server Logging</title>
<table frame="all" rowsep="1" colsep="1">
<title>Logging for Applicaitons</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Logging Module</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Application</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Bunyan</simpara></entry>
<entry align="left" valign="top"><simpara>Server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Console</simpara></entry>
<entry align="left" valign="top"><simpara>Client</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<simpara>Both the Bunyan and Console modules can both be used for local development and platform development.</simpara>
</note>
</section>
<section xml:id="bunyan-and-console-logging-levels-using-wfm-logger-and-setting-a-logging-level">
<title>Bunyan and Console Logging Levels</title>
<table frame="all" rowsep="1" colsep="1">
<title>Bunyan Logging Levels</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Value</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Parameter Type</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>debug</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>info</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>warn</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>error</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>For more information, see link:[<link xlink:href="https://www.npmjs.com/package/bunyan">https://www.npmjs.com/package/bunyan</link>]Bunyan Levels.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Console Logging Levels</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Value</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Parameter Type</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>debug</simpara></entry>
<entry align="left" valign="top"><simpara><literal>LogLevel.DEBUG</literal> or string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>info</simpara></entry>
<entry align="left" valign="top"><simpara><literal>LogLevel.INFO</literal> or string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>warn</simpara></entry>
<entry align="left" valign="top"><simpara><literal>LogLevel.WARN</literal> or string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>error</simpara></entry>
<entry align="left" valign="top"><simpara><literal>LogLevel.ERROR</literal> or string</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="understanding-the-logging-levels-using-wfm-logger-and-setting-a-logging-level">
<title>Understanding the Logging Levels</title>
<simpara>The following table illustrates what logging information is displayed for each Logging Level</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Information displayed by Logging Level</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Logging Level</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Information Displayed</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>debug</simpara></entry>
<entry align="left" valign="top"><simpara>debug, info, warn and error</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>info</simpara></entry>
<entry align="left" valign="top"><simpara>info, warn, and error</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>warn</simpara></entry>
<entry align="left" valign="top"><simpara>warn and info</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>error</simpara></entry>
<entry align="left" valign="top"><simpara>error</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
</section>
</section>
</chapter>
<chapter xml:id="testing-a-raincatcher-project">
<title>Testing a RainCatcher Project</title>

</chapter>
<chapter xml:id="troubleshooting-a-raincatcher-project">
<title>Troubleshooting a RainCatcher Project</title>

</chapter>
<chapter xml:id="raincatcher-modules-reference">
<title>RainCatcher Modules Reference</title>
<simpara><emphasis>Revised on 2017-08-01 14:44:02 IST</emphasis></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/topics/shared/images/images/raincatcher.svg" contentwidth="500" contentdepth="400"/>
</imageobject>
<textobject><phrase>logo</phrase></textobject>
</inlinemediaobject></simpara>
</chapter>
</book>